#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>

using namespace std;

int solution(string begin, string target, vector<string> words) {
    int answer = 0;
    int no_ans=1;
    for(int i=0;i<words.size();i++){
       if(words[i]==target){
            no_ans=0;
            break;
        }
    }
    if(no_ans==1)
        return answer;
    
    
    no_ans = 1;
    int start=0;
    for(int i=0;i<words.size();i++){
       if(words[i]==begin){
            no_ans=0;
            start = i;
            break;
        }
    }
    if(no_ans==1){
        words.push_back(begin);
        start = words.size()-1;
    }
    
    
    int g[51][51];
    int vis[51];
    for(int i=0;i<51;i++){
        for(int j=0;j<51;j++){
            g[i][j]=0;
        }
        vis[i]=0;
    }
    
    
    for(int i=0;i<words.size();i++){
        for(int j=0;j<words.size();j++){
            int no=0;
            if(i==j)
                continue;
            for(int k=0;k<words[0].length();k++){
                if(words[i][k]!=words[j][k]){
                    no = no + 1;
                    if(no>1)
                        break;
                }
            }
            if(no==1){
                g[i][j]=1;
                g[j][i]=1;
            }
        }
    }
    
    
    queue<pair<int,int>> q;
    q.push(make_pair(start,0));
    vis[start]=1;
    
    int w=-1;
    int time = -1;
    int end=0;
    while(true){
        if(q.empty()==true)
            break;
        w = q.front().first;
        time = q.front().second;
        q.pop();
        for(int i=0;i<words.size();i++){
            if(g[w][i]==1 && w!=i && vis[i]==0){
                if(target==words[i]){
                    answer=time+1;
                    end=1;
                    break;
                }
                q.push(make_pair(i,time+1));
                vis[i]=1;
            }
        }
        if(end==1)
            break;
    }
    
    return answer;
}
