#include <iostream>
#include <vector>
#include <queue>
#include <string>

using namespace std;


int main() {
    int answer = 0;
   
    int bridge_length = 100;
    int weight = 100;
    vector<int> truck_weights = { 10 };
  /*
    int bridge_length = 2;
    int weight = 10;
    vector<int> truck_weights = { 7,4,5,6 };
      
    */
    vector<pair<int, int>> bridge_vector;
    queue<int> after_bridge_truck;
    queue<int> bridge_on_truck;
    queue<int> before_bridge_truck;

    int* arr = new int[truck_weights.size()]();
   
    for (int i = 0; i < truck_weights.size(); i++) {
        before_bridge_truck.push(truck_weights[i]);
        arr[i] = 0;
    }

    // iter = bridge_on_truck.begin();
    int bridge_truck_weight = 0;
    int order = 0;
    int total_time = 0;
    int loop = 0;

    while (true) {
        loop++;
        for (int i = 0; i < truck_weights.size(); i++) {
            if (arr[i] == 1 && bridge_vector[i].first==bridge_length) {
                arr[i] = 2;
                bridge_truck_weight = bridge_truck_weight - bridge_vector[i].second;
                break;
            }
        }
        if (arr[truck_weights.size() - 1] == 2) {
            //last truck is finished
            total_time += 1;
            break;
        }
         if (before_bridge_truck.empty()==false && bridge_truck_weight + before_bridge_truck.front() <= weight) {
            // can move
            arr[order] = 1;
            bridge_vector.push_back(pair<int, int>(0, before_bridge_truck.front()));
            before_bridge_truck.pop();
            bridge_truck_weight = bridge_truck_weight + bridge_vector[order].second;
            order++;
        }
        
        for (int i = 0; i < truck_weights.size(); i++) {
            if (arr[i]==1) {
                //on the bridge
                bridge_vector[i].first += 1;
            }
        }
        total_time += 1;

    }
    cout << total_time << endl;
    delete[]arr;
    
    //return answer;
}

